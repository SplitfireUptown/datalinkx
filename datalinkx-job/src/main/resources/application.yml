server:
  port: 23456

spring:
  application:
    name: datalinkx-job
  redis:
    database: 0
    host: ${REDIS_HOST:127.0.0.1}
    port: ${REDIS_PORT:123456}
    password: ${REDIS_PASSWORD:123456}
  main:
    allow-circular-references: true

logging:
  pattern:
    console: ${CONSOLE_LOG_PATTERN:%clr(%d{${LOG_DATEFORMAT_PATTERN:yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(${PID:- }){magenta} [${spring.application.name}] %clr([%10.10t]){faint}[%36.36X{trace_id}] %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}}
  file:
    name: log/${spring.application.name}.log
  level:
    com.datalinkx: INFO

xxl:
  job:
    accessToken:
    admin:
      addresses: http://127.0.0.1:8080/xxl-job-admin
    executor:
      address: ''
      appname: datalinkx
      ip: ''
      logpath: log/jobhandler
      logretentiondays: 30
      port: 9999

feign:
  client:
    config:
      default:
        connectTimeout: 60000
        readTimeout: 60000
client:
  datalinkxserver:
    url: http://localhost:12345
  flink:
    url: http://localhost:8081
  seatunnel:
    url: http://localhost:5801
reserve:
  job_graph: false
flinkx:
  path: ${user.dir}/flinkx/
  #  如果使用容器化部署，请开启下面配置

  #  syncplugins:
  #    path: /datalinkx/flinkx/syncplugins/ #  这里填写“宿主机”`flinkx插件`挂载路径
  #  flinkconf:
  #    path: ${user.dir}/flinkx/flinkconf/ #  这里填写“容器内部”flinkconf的路径，请勿擅自修改

  #  1.在容器内部创建与宿主机挂载的相同路径及文件
  #   例如:
  #   docker -v  /{dir_path}/flinkx/syncplugins:/datalinkx/flinkx/syncplugins
  #
  #   则需要进入容器内并创建/{dir_path}/flinkx/syncplugins相同路径及文件
  #
  #   参考命令
  #
  #    docker exec -it my_container /bin/bash && mkdir -p /{dir_path}/flinkx && exit
  #    docker cp /{dir_path}/flinkx/syncplugins my_container:/{dir_path}/flinkx

#  2.修改宿主机flinkconf的配置文件中的配置
